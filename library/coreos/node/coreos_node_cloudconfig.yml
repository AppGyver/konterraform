#cloud-config
hostname: ${hostname}
write_files:
  - path: /etc/systemd/system/docker.service.d/50-kontena.conf
    content: |
      [Service]
      Environment='DOCKER_CGROUPS=--exec-opt native.cgroupdriver=cgroupfs'
      Environment='DOCKER_OPTS=--insecure-registry="10.81.0.0/19" --bip="172.17.43.1/16" --label=region=${docker_label_region} --label=az=${docker_label_az} --label=instance=${docker_label_instance_type}'

  - path: /etc/kontena-agent.env
    permissions: 0600
    owner: root
    content: |
      KONTENA_AGENT_IMAGE=${kontena_agent_image}
      KONTENA_AGENT_VERSION=${kontena_agent_version}
      KONTENA_AGENT_MEMORY_LIMIT=${kontena_agent_memory_limit}
      KONTENA_URI=${kontena_agent_master_uri}
      KONTENA_TOKEN=${kontena_agent_token}
      KONTENA_PEER_INTERFACE=${kontena_agent_peer_interface}

  - path: /etc/sysctl.d/99-inotify.conf
    owner: root
    permissions: 0644
    content: |
      fs.inotify.max_user_instances = 8192

  - path: /root/docker-watchdoge.sh
    owner: root
    permissions: 0700
    content: |
      #!/usr/bin/env sh

      function output() {
        echo "[docker-watchdoge] $@"
      }

      case "$1" in
      "reboot")
        if [ -f /tmp/docker-watchdoge ]; then
          output "Docker is not healthy, rebooting NOW"
          date >> /root/docker-watchdoge-reboots.log
          reboot
        fi

        output "Trap armed."
        touch /tmp/docker-watchdoge
        ;;
      "heartbeat")
        docker ps > /dev/null

        if [ "$?" == "0" ]; then
          rm -f /tmp/docker-watchdoge
          output "Docker is healthy, trap unarmed."
        else
          output "Docker is not healthy, not unarming trap (returned exit code: $?)"
        fi
        ;;
      *)
        output "Unknown argument: $1"
        exit 1
        ;;
      esac

coreos:
  locksmith:
    window-start: ${coreos_locksmith_window_start}
    window-length: ${coreos_locksmith_window_length}

  update:
    reboot-strategy: ${coreos_update_reboot_strategy}

  units:
    - name: 00-eth.network
      runtime: true
      content: |
        [Match]
        Name=eth*
        [Network]
        DHCP=yes
        DNS=172.17.43.1
        DNS=${dns_server}
        DOMAINS=kontena.local
        [DHCP]
        UseDNS=false

    - name: etcd2.service
      command: start
      enable: true
      content: |
        Description=etcd 2.0
        After=docker.service
        [Service]
        Restart=always
        RestartSec=5
        ExecStart=/usr/bin/docker logs --tail=10 -f kontena-etcd

    - name: 10-weave.network
      runtime: false
      content: |
        [Match]
        Type=bridge
        Name=weave*

        [Network]

    - name: kontena-agent.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=kontena-agent
        After=network-online.target
        After=docker.service
        Description=Kontena Agent
        Documentation=http://www.kontena.io/
        Requires=network-online.target
        Requires=docker.service

        [Service]
        Restart=always
        RestartSec=5
        EnvironmentFile=/etc/kontena-agent.env
        EnvironmentFile=-/etc/kontena-agent.custom.env
        ExecStartPre=-/usr/bin/docker stop kontena-agent
        ExecStartPre=-/usr/bin/docker rm kontena-agent
        ExecStartPre=-/usr/bin/docker pull $${KONTENA_AGENT_IMAGE}:$${KONTENA_AGENT_VERSION}
        ExecStart=/usr/bin/docker run --name kontena-agent \
          -e KONTENA_URI=$${KONTENA_URI} \
          -e KONTENA_TOKEN=$${KONTENA_TOKEN} \
          -e KONTENA_PEER_INTERFACE=$${KONTENA_PEER_INTERFACE} \
          -v=/var/run/docker.sock:/var/run/docker.sock \
          -v=/etc/kontena-agent.env:/etc/kontena.env \
          --net=host \
          --memory $${KONTENA_AGENT_MEMORY_LIMIT} \
          $${KONTENA_AGENT_IMAGE}:$${KONTENA_AGENT_VERSION}

    - name: docker-watchdoge-heartbeat.service
      content: |
        [Unit]
        Description=docker-watchdoge-heartbeat
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        ExecStart=/root/docker-watchdoge.sh heartbeat

    - name: docker-watchdoge-reboot.service
      content: |
        [Unit]
        Description=docker-watchdoge-reboot
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        ExecStart=/root/docker-watchdoge.sh reboot

    - name: docker-watchdoge-reboot.timer
      command: start
      enable: true
      content: |
        [Unit]

        [Timer]
        AccuracySec=1
        OnBootSec=30
        OnUnitActiveSec=30

        [Install]
        WantedBy=timers.target

    - name: docker-watchdoge-heartbeat.timer
      command: start
      enable: true
      content: |
        [Unit]

        [Timer]
        AccuracySec=1
        OnBootSec=30
        OnUnitActiveSec=15

        [Install]
        WantedBy=timers.target
